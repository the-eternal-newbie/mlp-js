[{"/Users/carlosvp/dev/mlp-js/src/components/Canvas/Canvas.js":"1","/Users/carlosvp/dev/mlp-js/src/index.js":"2","/Users/carlosvp/dev/mlp-js/src/App.js":"3","/Users/carlosvp/dev/mlp-js/src/containers/BackProp/BackPropLayout.js":"4","/Users/carlosvp/dev/mlp-js/src/components/TweakBar/TweakBar.js":"5","/Users/carlosvp/dev/mlp-js/src/reportWebVitals.js":"6","/Users/carlosvp/dev/mlp-js/src/util/MLP.js":"7","/Users/carlosvp/dev/mlp-js/src/util/Matrix.js":"8"},{"size":3574,"mtime":1606282114476,"results":"9","hashOfConfig":"10"},{"size":488,"mtime":1606183670775,"results":"11","hashOfConfig":"10"},{"size":169,"mtime":1606183850132,"results":"12","hashOfConfig":"10"},{"size":1880,"mtime":1606282673796,"results":"13","hashOfConfig":"10"},{"size":3114,"mtime":1606277290985,"results":"14","hashOfConfig":"10"},{"size":452,"mtime":1606184540731,"results":"15","hashOfConfig":"10"},{"size":6229,"mtime":1606282822756,"results":"16","hashOfConfig":"10"},{"size":2360,"mtime":1606277712059,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"2vc7sm",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/carlosvp/dev/mlp-js/src/components/Canvas/Canvas.js",["35","36"],"import React, { useState, useEffect } from 'react';\nimport {\n    ScatterChart,\n    Scatter,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n} from 'recharts';\nimport './Canvas.scss';\n\nconst Canvas = (props) => {\n    const {\n        setTrainingData,\n        encodedClass,\n        currentClass,\n        isNewClass,\n        isTraining,\n        setIsNewClass,\n    } = {\n        ...props,\n    };\n    const colors = { 1: '#fcba04ff', 2: '#935fa7ff', 3: '#ff6f5aff' };\n    const [data, setData] = useState([\n        {\n            points: [],\n            color: colors[currentClass],\n            class: currentClass,\n            encoded: encodedClass,\n        },\n    ]);\n\n    const drawCoordinates = (event) => {\n        console.log(colors[currentClass]);\n        if (isNewClass && currentClass === 3) {\n            setData(\n                data.map((item) =>\n                    item.class === 1\n                        ? {\n                              ...item,\n                              encoded: '001',\n                          }\n                        : item.class === 2\n                        ? { ...item, encoded: '010' }\n                        : item\n                )\n            );\n        }\n        isNewClass\n            ? setData((prev) => [\n                  ...prev,\n                  {\n                      points: [{ x: event.xValue, y: event.yValue }],\n                      color: colors[currentClass],\n                      encoded: encodedClass,\n                      class: currentClass,\n                  },\n              ])\n            : setData(\n                  data.map((item) =>\n                      item.class === currentClass\n                          ? {\n                                ...item,\n                                points: [\n                                    ...item.points,\n                                    { x: event.xValue, y: event.yValue },\n                                ],\n                            }\n                          : item\n                  )\n              );\n        isNewClass && setIsNewClass(false);\n        const x = [];\n        const y = [];\n        data.forEach((dataSet) => {\n            if (dataSet.lenght !== 0) {\n                dataSet['points'].forEach((coord) => {\n                    x.push([coord['x'], coord['y']]);\n                    y.push([\n                        dataSet['encoded']\n                            .split('')\n                            .map((char) => parseInt(char)),\n                    ]);\n                });\n            }\n        });\n        setTrainingData([x, y]);\n    };\n\n    return (\n        <section className=\"cartesian\">\n            <ScatterChart\n                width={800}\n                height={800}\n                onClick={(event) => drawCoordinates(event)}\n            >\n                <CartesianGrid />\n                <XAxis\n                    type=\"number\"\n                    dataKey=\"x\"\n                    domain={[-5, 5]}\n                    allowDataOverflow={true}\n                    tickCount={11}\n                />\n                <YAxis\n                    type=\"number\"\n                    dataKey=\"y\"\n                    domain={[-5, 5]}\n                    allowDataOverflow={true}\n                    tickCount={11}\n                />\n                <Tooltip cursor={{ strokeDasharray: '3 3' }} />\n                {data.map((dataSet) => (\n                    <Scatter data={dataSet['points']} fill={dataSet['color']} />\n                ))}\n            </ScatterChart>\n        </section>\n    );\n};\n\nexport default Canvas;\n","/Users/carlosvp/dev/mlp-js/src/index.js",[],"/Users/carlosvp/dev/mlp-js/src/App.js",[],"/Users/carlosvp/dev/mlp-js/src/containers/BackProp/BackPropLayout.js",[],"/Users/carlosvp/dev/mlp-js/src/components/TweakBar/TweakBar.js",[],"/Users/carlosvp/dev/mlp-js/src/reportWebVitals.js",[],"/Users/carlosvp/dev/mlp-js/src/util/MLP.js",[],"/Users/carlosvp/dev/mlp-js/src/util/Matrix.js",[],{"ruleId":"37","severity":1,"message":"38","line":1,"column":27,"nodeType":"39","messageId":"40","endLine":1,"endColumn":36},{"ruleId":"37","severity":1,"message":"41","line":18,"column":9,"nodeType":"39","messageId":"40","endLine":18,"endColumn":19},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'isTraining' is assigned a value but never used."]